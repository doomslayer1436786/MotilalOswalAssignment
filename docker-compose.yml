version: '3.8'

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - kafka-network

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: mssql
    environment:
      - SA_PASSWORD=Your_strong_pwd1
      - ACCEPT_EULA=Y
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - mssql_data:/var/opt/mssql
      - ./sql:/docker-entrypoint-initdb.d
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Your_strong_pwd1 -C -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  producer:
    build: .
    container_name: producer
    command: /producer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=events
      - SERVICE_PORT=8080
      - LOG_LEVEL=INFO
    ports:
      - "8080:8080"
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  consumer:
    build: .
    container_name: consumer
    command: /consumer
    depends_on:
      - kafka
      - mssql
      - redis
    environment:
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=events
      - KAFKA_GROUP_ID=consumer-group
      - MSSQL_CONN=server=mssql;user id=sa;password=Your_strong_pwd1;database=events;encrypt=disable
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
      - SERVICE_PORT=8081
      - LOG_LEVEL=INFO
    ports:
      - "8081:8081"
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build: .
    container_name: api
    command: /api
    depends_on:
      - mssql
    environment:
      - MSSQL_CONN=server=mssql;user id=sa;password=Your_strong_pwd1;database=events;encrypt=disable
      - SERVICE_PORT=8082
      - LOG_LEVEL=INFO
    ports:
      - "8082:8082"
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  zookeeper_data:
  kafka_data:
  mssql_data:
  redis_data:

networks:
  kafka-network:
    driver: bridge
